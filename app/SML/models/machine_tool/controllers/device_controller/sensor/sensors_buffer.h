#ifndef SENSORSBUFFER_H
#define SENSORSBUFFER_H

#include "models/structs.h"
#include "models/exceptions/exceptions.h"

/**
 * @brief Класс Буфер датчиков
 *
 * Содержит сырое состояние всех датчиков станка, которое пришло от адаптеров.
 *
 * Класс используется датчиками для проверки и обновления своего состояния.
 *
 * Необходим для того, чтобы однозначно идентифицировать
 * какой датчик представляет собой каждый бит раздела посылки, хранящего текущее состояние датчиков станка.
 */
class SensorsBuffer
{
public:

    /**
     * @brief Конструктор класса
     * @param bufferSize размер буфера датчиков (сколько байт посылки будет интерпретировано, как раздел, хранящий состояния датчиков)
     * @param parent родительский объект
     */
    explicit SensorsBuffer(size_t bufferSize = 16);

    /**
     * @brief Проводит изменнеие размера буфера и его инициализацию начальными значениями
     * @param size новый размер буфера
     */
    void resetBuffer(size_t size);

    /**
     * @brief Проверяет изменилось ли состояние порта датчиков
     * порт - группа из 8 датчиков с номерами 0-7 представленная в виде байта
     *
     * @param currentState байт, содержащий текущее состояние порта
     * @param newState байт, содержащий новое значение состояния порта
     * @return true, если состояние порта изменилось, false - иначе
     */
    bool isPortStateChanged(byte currentState, byte newState);

    /**
     * @brief Обновляет состояние буфера датчиков
     * @param value новое значение буфера
     *
     * @warning Бросает исключение SynchronizeStateException, если размер нового состояния буфера не совпадает с размером текущего состояния буфера.
     */
    void updateBuffer(byte_array value);

    /**
     * @brief Возвращает состояние входа
     * @param plateName имя платы, на которой находится вход (Доступные имена: "u1", "u2")
     * @param portNumber номер порта, в котором находится вход
     * @param inputNumber номер входа внутри порта
     * @return состояние входа. true - есть напряжение на входе. false - нет напряжения.
     *
     * @warning Состояние входа == сырое состояние датчика (для определения того, сработал датчик или нет, необходимо знать при каком состоянии входа датчик считается активным)
     * @warning Бросает исключение SynchronizeStateException, если номер порта превышает размер буфера или номер входа > 7 (В порте всего 8 входов с номерами 0-7).
     */
    bool getInputState(QString plateName, size_t portNumber, size_t inputNumber) const;

private:
    /**
     * @brief Содержит всю информацию о состояниях датчиков станка
     * Размер буфера должен составлять не менее 2 байт.
     * Каждый байт представляет собой состояние какого-либо порта.
     * К одному порту может быть подключено до 8 датчиков.
     * Таким образом, максимальное число поддерживаемых датчиков равно buffer_size * 8.
     *
     * Пример структуры буфера
     * buffer[0] - датчики 0 порта U1 (1 байт)
     * buffer[1] - датчики 1 порта U1 (1 байт)
     * buffer[2] - датчики 2 порта U1 (1 байт)
     * buffer[3] - датчики 3 порта U1 (1 байт)
     * buffer[4] - датчики 4 порта U1 (1 байт)
     * buffer[5] - датчики 5 порта U1 (1 байт)
     * buffer[6] - датчики 6 порта U1 (1 байт)
     * buffer[7] - датчики 7 порта U1 (1 байт)
     * buffer[8] - датчики 0 порта U2 (1 байт)
     * buffer[9] - датчики 1 порта U2 (1 байт)
     * buffer[10] - датчики 2 порта U2 (1 байт)
     * buffer[11] - датчики 3 порта U2 (1 байт)
     * buffer[12] - датчики 4 порта U2 (1 байт)
     * buffer[13] - датчики 5 порта U2 (1 байт)
     * buffer[14] - датчики 6 порта U2 (1 байт)
     * buffer[15] - датчики 7 порта U2 (1 байт)
     *
     * При такой организации буфера, если размер буфера будет меньше станартного размера (16 байт),
     * то структура выше определяет, какие порты контроллера U1 и U2 не будут задействованы.
     * Если размер буфера будет больше, то данные с 17 байта и дальше  будут игнорироваться.
     */
    byte_array m_buffer;

    /**
     * @brief Метод для проверки состояния датчика стандартным алгоритмом
     *
     * @param inputNumber - номер входа, к которому подключен датчик
     * @param portState - состояние порта, к которому подключен датчик
     * @return есть ли напряжение на входе
     *
     * Проверяет только наличие напряжения на входе. Т.е. true - напряжение есть. false - напряжения нет.
     *
     * @warning Не определяет включен датчик или выключен!
     * @warning Бросает исключение SynchronizeStateException, если номер входа > 7.
     *
     * Применима, если номер входа датчика = номеру бита в байте, кодирующем состояние группы датчиков.
     * Нумерация в байте порта должна идти с младшего разряда и, начинаться, с нуля.
     * Пример:
     * 1111[1]11
     * В данном случае, датчик, состояние которого выделено [], подключен к 1 порту и 2 входу.
     */
    bool standardInputStateCheck(size_t inputNumber, byte portState) const;

    /**
     * @brief Проверяет состояние датчика, подключенного к U1
     *
     * @param portNumber - номер порта, к которому подключен датчик
     * @param inputNumber - номер входа, к которому подключен датчик
     * @return true, если есть напряжение на входе, false - иначе
     *
     * Проверяет только наличие напряжения на входе. Т.е. true - напряжение есть. false - напряжения нет.
     *
     * @warning Не определяет включен датчик или выключен!
     * @warning Бросает исключение SynchronizeStateException, если номер порта > 7 или номер входа > 7.
     */
    bool checkU1SensorState(size_t portNumber, size_t inputNumber) const;

    /**
     * @brief Проверяет состояние датчика, подключенного к U2
     *
     * @param portNumber - номер порта, к которому подключен датчик
     * @param inputNumber - номер входа, к которому подключен датчик
     * @return true, если есть напряжение на входе, false - иначе
     *
     * Проверяет только наличие напряжения на входе. Т.е. true - напряжение есть. false - напряжения нет.
     *
     * @warning Не определяет включен датчик или выключен!
     * @warning Бросает исключение SynchronizeStateException, если номер порта > 7 или номер входа > 7.
     */
    bool checkU2SensorState(size_t portNumber, size_t inputNumber) const;
};

#endif // SENSORSBUFFER_H
